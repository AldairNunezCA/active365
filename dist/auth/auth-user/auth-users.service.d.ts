import { Users } from 'src/entities/users.entity';
import { Repository } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import { EmailService } from 'src/email/email.service';
import { Gyms } from 'src/entities/gyms.entity';
export declare class AuthUsersService {
    private readonly userRepository;
    private readonly gymRepository;
    private readonly jwtService;
    private readonly emailService;
    constructor(userRepository: Repository<Users>, gymRepository: Repository<Gyms>, jwtService: JwtService, emailService: EmailService);
    login(email: string, passwordLogin: string, isGoogleLogin?: boolean): Promise<{
        message: string;
        token: string;
        user: {
            id: string;
            name: string;
            email: string;
            phone?: number;
            address?: string;
            city?: string;
            rol: string;
            status: import("../../enums/status.enum").statusUser;
            height?: number;
            weight?: number;
            imgUrl: string;
            createdAt: Date;
            membershipExpiresAt: Date;
            gym: Gyms;
            appointments: import("../../entities/appointments.entity").Appointments[];
            orders: import("../../entities/orders.entity").Orders[];
            reviews: import("../../entities/reviewsProducts.entity").ReviewsProducts[];
            reviewsGyms: import("../../entities/reviewsGyms.entity").ReviewsGyms[];
        } | {
            id: string;
            name: string;
            email: string;
            phone: number;
            address: string;
            city: string;
            latitude: number;
            longitude: number;
            rol: string;
            status: import("../../enums/status.enum").statusGym;
            createdAt: Date;
            classes: import("../../entities/class.entity").Classes[];
            users: Users[];
            reviews: import("../../entities/reviewsGyms.entity").ReviewsGyms[];
        };
    }>;
    createUser(user: Partial<Users>, isGoogleCreate?: boolean): Promise<{
        id: string;
        name: string;
        email: string;
        phone?: number;
        address?: string;
        city?: string;
        rol: string;
        status: import("../../enums/status.enum").statusUser;
        height?: number;
        weight?: number;
        imgUrl: string;
        createdAt: Date;
        membershipExpiresAt: Date;
        gym: Gyms;
        appointments: import("../../entities/appointments.entity").Appointments[];
        orders: import("../../entities/orders.entity").Orders[];
        reviews: import("../../entities/reviewsProducts.entity").ReviewsProducts[];
        reviewsGyms: import("../../entities/reviewsGyms.entity").ReviewsGyms[];
    }>;
    validateGoogleUser(googleUser: Partial<Users>): Promise<{
        id: string;
        name: string;
        email: string;
        phone?: number;
        address?: string;
        city?: string;
        rol: string;
        status: import("../../enums/status.enum").statusUser;
        height?: number;
        weight?: number;
        imgUrl: string;
        createdAt: Date;
        membershipExpiresAt: Date;
        gym: Gyms;
        appointments: import("../../entities/appointments.entity").Appointments[];
        orders: import("../../entities/orders.entity").Orders[];
        reviews: import("../../entities/reviewsProducts.entity").ReviewsProducts[];
        reviewsGyms: import("../../entities/reviewsGyms.entity").ReviewsGyms[];
    }>;
}
